/**
 * Z-axis Navigation Controls
 * Provides UI controls and keyboard/mouse interactions for 3D spatial navigation
 */

import type { SpatialEngine } from '../spatial-engine.js';
import type { ZNavigationOptions } from '../types.js';

interface ZControlsOptions {
  enableKeyboard?: boolean;
  enableMouse?: boolean;
  enableTouch?: boolean;
  enableUI?: boolean;
  keyboardSensitivity?: number;
  mouseSensitivity?: number;
  touchSensitivity?: number;
  showDepthIndicator?: boolean;
  showLayerList?: boolean;
  container?: HTMLElement;
}

interface ControlsState {
  isActive: boolean;
  isDragging: boolean;
  lastPointerY: number;
  keyboardNavigation: {
    forward: boolean;
    backward: boolean;
    fastMode: boolean;
  };
}

export class ZNavigationControls {
  private engine: SpatialEngine;
  private container: HTMLElement;
  private uiContainer: HTMLElement | null = null;
  private options: Required<ZControlsOptions>;
  private state: ControlsState;
  private eventListeners: Array<{ element: EventTarget; event: string; handler: EventListener }> = [];
  
  // UI Elements
  private depthSlider: HTMLInputElement | null = null;
  private depthDisplay: HTMLElement | null = null;
  private layerList: HTMLElement | null = null;
  private controlPanel: HTMLElement | null = null;

  constructor(engine: SpatialEngine, options: ZControlsOptions = {}) {
    this.engine = engine;
    this.container = options.container ?? engine.getViewport().constructor.arguments?.[0] ?? document.body;
    
    this.options = {
      enableKeyboard: true,
      enableMouse: true,
      enableTouch: true,
      enableUI: true,
      keyboardSensitivity: 10,
      mouseSensitivity: 0.5,
      touchSensitivity: 0.3,
      showDepthIndicator: true,
      showLayerList: true,
      container: this.container,
      ...options,
    };
    
    this.state = {
      isActive: false,
      isDragging: false,
      lastPointerY: 0,
      keyboardNavigation: {
        forward: false,
        backward: false,
        fastMode: false,
      },
    };
    
    if (!this.engine.is3D()) {\n      console.warn('Z-Navigation controls require 3D mode to be enabled');\n      return;\n    }\n    \n    this.initialize();\n  }\n  \n  private initialize(): void {\n    if (this.options.enableUI) {\n      this.createUI();\n    }\n    \n    if (this.options.enableKeyboard) {\n      this.setupKeyboardControls();\n    }\n    \n    if (this.options.enableMouse) {\n      this.setupMouseControls();\n    }\n    \n    if (this.options.enableTouch) {\n      this.setupTouchControls();\n    }\n    \n    // Listen to engine events\n    this.engine.on('zNavigationEnd', (data) => {\n      this.updateUI(data.z);\n    });\n    \n    // Initial UI update\n    this.updateUI(this.engine.getCurrentZ());\n  }\n  \n  /**\n   * UI Creation\n   */\n  private createUI(): void {\n    this.uiContainer = document.createElement('div');\n    this.uiContainer.className = 'z-navigation-controls';\n    this.uiContainer.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: rgba(0, 0, 0, 0.8);\n      color: white;\n      padding: 16px;\n      border-radius: 8px;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n      font-size: 14px;\n      z-index: 1000;\n      min-width: 200px;\n      backdrop-filter: blur(10px);\n    `;\n    \n    this.createDepthControls();\n    \n    if (this.options.showLayerList) {\n      this.createLayerList();\n    }\n    \n    this.createActionButtons();\n    this.createInstructions();\n    \n    this.container.appendChild(this.uiContainer);\n  }\n  \n  private createDepthControls(): void {\n    if (!this.uiContainer) return;\n    \n    // Depth indicator\n    if (this.options.showDepthIndicator) {\n      const depthSection = document.createElement('div');\n      depthSection.style.marginBottom = '16px';\n      \n      const depthLabel = document.createElement('div');\n      depthLabel.textContent = 'Depth:';\n      depthLabel.style.marginBottom = '8px';\n      \n      this.depthDisplay = document.createElement('div');\n      this.depthDisplay.style.cssText = `\n        font-family: monospace;\n        font-size: 16px;\n        font-weight: bold;\n        text-align: center;\n        margin-bottom: 8px;\n      `;\n      \n      // Depth slider\n      this.depthSlider = document.createElement('input');\n      this.depthSlider.type = 'range';\n      this.depthSlider.min = '-1000';\n      this.depthSlider.max = '1000';\n      this.depthSlider.value = '0';\n      this.depthSlider.step = '1';\n      this.depthSlider.style.cssText = `\n        width: 100%;\n        margin: 8px 0;\n        accent-color: #007AFF;\n      `;\n      \n      this.addEventListener(this.depthSlider, 'input', (e) => {\n        const target = e.target as HTMLInputElement;\n        const newZ = parseFloat(target.value);\n        this.navigateToZ(newZ, { duration: 100 });\n      });\n      \n      depthSection.appendChild(depthLabel);\n      depthSection.appendChild(this.depthDisplay);\n      depthSection.appendChild(this.depthSlider);\n      this.uiContainer.appendChild(depthSection);\n    }\n  }\n  \n  private createLayerList(): void {\n    if (!this.uiContainer) return;\n    \n    const layerSection = document.createElement('div');\n    layerSection.style.marginBottom = '16px';\n    \n    const layerLabel = document.createElement('div');\n    layerLabel.textContent = 'Layers:';\n    layerLabel.style.marginBottom = '8px';\n    \n    this.layerList = document.createElement('div');\n    this.layerList.style.cssText = `\n      max-height: 150px;\n      overflow-y: auto;\n      border: 1px solid rgba(255, 255, 255, 0.2);\n      border-radius: 4px;\n      padding: 4px;\n    `;\n    \n    layerSection.appendChild(layerLabel);\n    layerSection.appendChild(this.layerList);\n    this.uiContainer.appendChild(layerSection);\n    \n    this.updateLayerList();\n  }\n  \n  private createActionButtons(): void {\n    if (!this.uiContainer) return;\n    \n    const buttonSection = document.createElement('div');\n    buttonSection.style.cssText = `\n      display: flex;\n      gap: 8px;\n      margin-bottom: 16px;\n      flex-wrap: wrap;\n    `;\n    \n    const buttonStyle = `\n      background: #007AFF;\n      color: white;\n      border: none;\n      padding: 8px 12px;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 12px;\n      transition: background-color 0.2s;\n    `;\n    \n    const hoverStyle = 'background: #0056CC;';\n    \n    // Surface button\n    const surfaceBtn = document.createElement('button');\n    surfaceBtn.textContent = 'Surface';\n    surfaceBtn.style.cssText = buttonStyle;\n    surfaceBtn.addEventListener('mouseenter', () => {\n      surfaceBtn.style.backgroundColor = '#0056CC';\n    });\n    surfaceBtn.addEventListener('mouseleave', () => {\n      surfaceBtn.style.backgroundColor = '#007AFF';\n    });\n    this.addEventListener(surfaceBtn, 'click', () => {\n      this.resetToSurface();\n    });\n    \n    // Dive button\n    const diveBtn = document.createElement('button');\n    diveBtn.textContent = 'Dive';\n    diveBtn.style.cssText = buttonStyle;\n    diveBtn.addEventListener('mouseenter', () => {\n      diveBtn.style.backgroundColor = '#0056CC';\n    });\n    diveBtn.addEventListener('mouseleave', () => {\n      diveBtn.style.backgroundColor = '#007AFF';\n    });\n    this.addEventListener(diveBtn, 'click', () => {\n      this.diveDeeper(20);\n    });\n    \n    // Emerge button\n    const emergeBtn = document.createElement('button');\n    emergeBtn.textContent = 'Emerge';\n    emergeBtn.style.cssText = buttonStyle;\n    emergeBtn.addEventListener('mouseenter', () => {\n      emergeBtn.style.backgroundColor = '#0056CC';\n    });\n    emergeBtn.addEventListener('mouseleave', () => {\n      emergeBtn.style.backgroundColor = '#007AFF';\n    });\n    this.addEventListener(emergeBtn, 'click', () => {\n      this.emergeUp(20);\n    });\n    \n    buttonSection.appendChild(surfaceBtn);\n    buttonSection.appendChild(diveBtn);\n    buttonSection.appendChild(emergeBtn);\n    this.uiContainer.appendChild(buttonSection);\n  }\n  \n  private createInstructions(): void {\n    if (!this.uiContainer) return;\n    \n    const instructions = document.createElement('div');\n    instructions.style.cssText = `\n      font-size: 11px;\n      opacity: 0.7;\n      line-height: 1.4;\n    `;\n    \n    instructions.innerHTML = `\n      <strong>Controls:</strong><br>\n      • <kbd>Q</kbd>/<kbd>E</kbd> - Dive/Emerge<br>\n      • <kbd>Shift</kbd> + Q/E - Fast navigation<br>\n      • Mouse wheel + <kbd>Alt</kbd> - Z navigation<br>\n      • Drag slider for precise control\n    `;\n    \n    this.uiContainer.appendChild(instructions);\n  }\n  \n  /**\n   * Input Controls Setup\n   */\n  private setupKeyboardControls(): void {\n    this.addEventListener(document, 'keydown', (e) => {\n      const event = e as KeyboardEvent;\n      \n      switch (event.code) {\n        case 'KeyQ':\n          if (!this.state.keyboardNavigation.forward) {\n            this.state.keyboardNavigation.forward = true;\n            this.state.keyboardNavigation.fastMode = event.shiftKey;\n            this.startContinuousNavigation();\n          }\n          event.preventDefault();\n          break;\n          \n        case 'KeyE':\n          if (!this.state.keyboardNavigation.backward) {\n            this.state.keyboardNavigation.backward = true;\n            this.state.keyboardNavigation.fastMode = event.shiftKey;\n            this.startContinuousNavigation();\n          }\n          event.preventDefault();\n          break;\n          \n        case 'KeyR':\n          if (event.ctrlKey || event.metaKey) {\n            this.resetToSurface();\n            event.preventDefault();\n          }\n          break;\n      }\n    });\n    \n    this.addEventListener(document, 'keyup', (e) => {\n      const event = e as KeyboardEvent;\n      \n      switch (event.code) {\n        case 'KeyQ':\n          this.state.keyboardNavigation.forward = false;\n          break;\n          \n        case 'KeyE':\n          this.state.keyboardNavigation.backward = false;\n          break;\n      }\n    });\n  }\n  \n  private setupMouseControls(): void {\n    this.addEventListener(this.container, 'wheel', (e) => {\n      const event = e as WheelEvent;\n      \n      if (event.altKey) {\n        const delta = event.deltaY * this.options.mouseSensitivity;\n        const distance = Math.abs(delta);\n        \n        if (delta > 0) {\n          this.diveDeeper(distance, 200);\n        } else {\n          this.emergeUp(distance, 200);\n        }\n        \n        event.preventDefault();\n      }\n    }, { passive: false });\n    \n    // Mouse drag for Z navigation\n    this.addEventListener(this.container, 'mousedown', (e) => {\n      const event = e as MouseEvent;\n      \n      if (event.ctrlKey || event.metaKey) {\n        this.state.isDragging = true;\n        this.state.lastPointerY = event.clientY;\n        event.preventDefault();\n      }\n    });\n    \n    this.addEventListener(document, 'mousemove', (e) => {\n      const event = e as MouseEvent;\n      \n      if (this.state.isDragging) {\n        const deltaY = event.clientY - this.state.lastPointerY;\n        const distance = Math.abs(deltaY) * this.options.mouseSensitivity;\n        \n        if (deltaY > 0) {\n          this.diveDeeper(distance, 50);\n        } else {\n          this.emergeUp(distance, 50);\n        }\n        \n        this.state.lastPointerY = event.clientY;\n        event.preventDefault();\n      }\n    });\n    \n    this.addEventListener(document, 'mouseup', () => {\n      this.state.isDragging = false;\n    });\n  }\n  \n  private setupTouchControls(): void {\n    let lastTouchY = 0;\n    let touchStartZ = 0;\n    \n    this.addEventListener(this.container, 'touchstart', (e) => {\n      const event = e as TouchEvent;\n      \n      if (event.touches.length === 2) {\n        // Two-finger touch for Z navigation\n        const touch1 = event.touches[0];\n        const touch2 = event.touches[1];\n        lastTouchY = (touch1.clientY + touch2.clientY) / 2;\n        touchStartZ = this.engine.getCurrentZ();\n        event.preventDefault();\n      }\n    }, { passive: false });\n    \n    this.addEventListener(this.container, 'touchmove', (e) => {\n      const event = e as TouchEvent;\n      \n      if (event.touches.length === 2) {\n        const touch1 = event.touches[0];\n        const touch2 = event.touches[1];\n        const currentY = (touch1.clientY + touch2.clientY) / 2;\n        \n        const deltaY = currentY - lastTouchY;\n        const zDelta = deltaY * this.options.touchSensitivity;\n        \n        this.navigateToZ(touchStartZ + zDelta, { duration: 50 });\n        event.preventDefault();\n      }\n    }, { passive: false });\n  }\n  \n  /**\n   * Navigation Methods\n   */\n  private async navigateToZ(targetZ: number, options: Partial<ZNavigationOptions> = {}): Promise<void> {\n    return this.engine.navigateToZ({\n      targetZ,\n      transitionDuration: 300,\n      ...options,\n    });\n  }\n  \n  private async diveDeeper(distance: number = 10, duration: number = 500): Promise<void> {\n    return this.engine.diveDeeper(distance, duration);\n  }\n  \n  private async emergeUp(distance: number = 10, duration: number = 500): Promise<void> {\n    return this.engine.emergeUp(distance, duration);\n  }\n  \n  private async resetToSurface(duration: number = 1000): Promise<void> {\n    return this.engine.resetToSurface(duration);\n  }\n  \n  /**\n   * Continuous Navigation\n   */\n  private continuousNavigationId: number | null = null;\n  \n  private startContinuousNavigation(): void {\n    if (this.continuousNavigationId !== null) {\n      return; // Already running\n    }\n    \n    const navigate = () => {\n      const { forward, backward, fastMode } = this.state.keyboardNavigation;\n      \n      if (!forward && !backward) {\n        this.continuousNavigationId = null;\n        return; // Stop navigation\n      }\n      \n      const baseSpeed = this.options.keyboardSensitivity;\n      const speed = fastMode ? baseSpeed * 3 : baseSpeed;\n      \n      if (forward) {\n        this.diveDeeper(speed, 100);\n      } else if (backward) {\n        this.emergeUp(speed, 100);\n      }\n      \n      this.continuousNavigationId = requestAnimationFrame(navigate);\n    };\n    \n    this.continuousNavigationId = requestAnimationFrame(navigate);\n  }\n  \n  /**\n   * UI Updates\n   */\n  private updateUI(currentZ: number): void {\n    if (this.depthDisplay) {\n      this.depthDisplay.textContent = `Z: ${currentZ.toFixed(1)}`;\n    }\n    \n    if (this.depthSlider && Math.abs(parseFloat(this.depthSlider.value) - currentZ) > 0.1) {\n      this.depthSlider.value = currentZ.toString();\n    }\n    \n    this.updateLayerList();\n  }\n  \n  private updateLayerList(): void {\n    if (!this.layerList) return;\n    \n    this.layerList.innerHTML = '';\n    \n    const layers = this.engine.getAllSpatialLayers();\n    const currentZ = this.engine.getCurrentZ();\n    \n    if (layers.length === 0) {\n      this.layerList.innerHTML = '<div style=\"opacity: 0.5; font-style: italic;\">No layers</div>';\n      return;\n    }\n    \n    layers.forEach(layer => {\n      const layerElement = document.createElement('div');\n      const distance = Math.abs(layer.zIndex - currentZ);\n      const isNear = distance < 20;\n      \n      layerElement.style.cssText = `\n        padding: 4px 8px;\n        margin: 2px 0;\n        border-radius: 3px;\n        cursor: pointer;\n        background: ${isNear ? 'rgba(0, 122, 255, 0.2)' : 'transparent'};\n        border-left: 3px solid ${isNear ? '#007AFF' : 'transparent'};\n        transition: all 0.2s;\n      `;\n      \n      layerElement.innerHTML = `\n        <div style=\"font-weight: ${isNear ? 'bold' : 'normal'};\">\\n          ${layer.name || `Layer ${layer.zIndex}`}\\n        </div>\\n        <div style=\"font-size: 11px; opacity: 0.7;\">\\n          Z: ${layer.zIndex} (${distance.toFixed(1)} away)\\n        </div>\\n      `;\n      \n      layerElement.addEventListener('mouseenter', () => {\n        layerElement.style.backgroundColor = 'rgba(0, 122, 255, 0.3)';\n      });\n      \n      layerElement.addEventListener('mouseleave', () => {\n        layerElement.style.backgroundColor = isNear ? 'rgba(0, 122, 255, 0.2)' : 'transparent';\n      });\n      \n      this.addEventListener(layerElement, 'click', () => {\n        this.navigateToZ(layer.zIndex, { duration: 800, easing: 'easeInOutCubic' });\n      });\n      \n      this.layerList!.appendChild(layerElement);\n    });\n  }\n  \n  /**\n   * Utility Methods\n   */\n  private addEventListener(\n    element: EventTarget,\n    event: string,\n    handler: EventListener,\n    options?: AddEventListenerOptions\n  ): void {\n    element.addEventListener(event, handler, options);\n    this.eventListeners.push({ element, event, handler });\n  }\n  \n  /**\n   * Public API\n   */\n  setEnabled(enabled: boolean): void {\n    this.state.isActive = enabled;\n    \n    if (this.uiContainer) {\n      this.uiContainer.style.display = enabled ? 'block' : 'none';\n    }\n  }\n  \n  isEnabled(): boolean {\n    return this.state.isActive;\n  }\n  \n  updateOptions(options: Partial<ZControlsOptions>): void {\n    Object.assign(this.options, options);\n    \n    // Recreate UI if options changed\n    if (options.showDepthIndicator !== undefined || options.showLayerList !== undefined) {\n      this.destroyUI();\n      if (this.options.enableUI) {\n        this.createUI();\n      }\n    }\n  }\n  \n  /**\n   * Cleanup\n   */\n  private destroyUI(): void {\n    if (this.uiContainer) {\n      this.uiContainer.remove();\n      this.uiContainer = null;\n      this.depthSlider = null;\n      this.depthDisplay = null;\n      this.layerList = null;\n      this.controlPanel = null;\n    }\n  }\n  \n  destroy(): void {\n    // Stop continuous navigation\n    if (this.continuousNavigationId !== null) {\n      cancelAnimationFrame(this.continuousNavigationId);\n      this.continuousNavigationId = null;\n    }\n    \n    // Remove all event listeners\n    this.eventListeners.forEach(({ element, event, handler }) => {\n      element.removeEventListener(event, handler);\n    });\n    this.eventListeners = [];\n    \n    // Destroy UI\n    this.destroyUI();\n  }\n}